#include<iostream>
#include<string>
#include<regex>
#include<stdlib.h>
#include<cstdio>
using namespace std;
int lc=0,x=0;  //x=global integer,lc=location counter
struct program
{
    char line[80];
}s1[100];
struct ST
{
    string segment;
    string var;
    string type;
    string Dtype;
    int lc;
} st[100];
int segment(string S,int lc,int x,int y)
 {   	
     int p0,p;
     string a=s1[y].line,test;
     p0=a.find("ends");
     p=a.find("db");
	 int p1=a.find("dw");
	 int p2=a.find("dd");
	 int p4=a.find(":");
	 regex DEC("[0-9]+");
	 regex VARDEC("[a-zA-z]+[0-9]+]");
	 regex HEX("[0-9]+[h]");
 if(p0>0)
   {
			return y++;;
	}
	 else if(p>0 || p1>0 ||p2>0 || p4>0)
	 {  
			
		if(p>=0 )
		{  
	    	test=a.substr(p+2,a.length());
			if(regex_match(test,HEX) || regex_match(test,DEC) || regex_match(a.substr(0,p),VARDEC) )
			 {
				cout<<"a";
				p=a.find("db");
				st[x].var=a.substr(0,p);
				int count=1;
				st[x].lc=lc;
				for(int k=p;k<a.length();k++)
				{
					if(a[p]==',')
					{
						count++;
					    
					}
				}
				p=a.find("dup");
				char g[10];
				int f=0;
				if(p>=0)
				{
					p=p+3;
					g[f]=a[++p];
					cout<<g[f]<<endl;
					while(a[++p]!=')')
					{
					g[++f]=a[p];}
					}
					f=atoi(g);
					count*=f;

					lc=lc+count;

					st[x].segment=p;
					segment(S,lc,++x,++y);
				}
			else
			{
				cout<<"error";
				exit(0);
			    
			}
	   	}
		 else if(p1>=0 )
		 {    
		     if(regex_match(a.substr(p+2,a.length()),HEX) || regex_match(a.substr(p+2,a.length()),DEC) || regex_match(a.substr(0,p1),VARDEC))
		         {
					p=a.find("dw");
					st[x].var=a.substr(0,p);
					int count=2;
					st[x].lc=lc;
					for(int k=p;k<a.length();k++)
					{
						if(a[p]==',')
							{
								count+=2;;}
				        	}
					p=a.find("dup");
					char g[10];
					int f=0;
				    if(p>=0)
					{
						p=p+3;
						g[f]=a[++p];
						cout<<g[f]<<endl;
						while(a[++p]!=')')
						{
						g[++f]=a[p];}}
						f=atoi(g);
						count*=f;
						lc=lc+count;
						st[x].type="var11";
						st[x].segment=S;
						return segment(S,lc,++x,++y);
						}
				else
				{
					cout<<"error";
					}
				
			}
		 else if(p2>=0 )
		 { 	
		     if(regex_match(a.substr(p+2,a.length()),HEX) || regex_match(a.substr(p+2,a.length()),DEC) || regex_match(a.substr(0,p2),VARDEC))
		         {
					p=a.find("dd");
					st[x].var=a.substr(0,p);
					int count=4;
					st[x].lc=lc;
					for(int k=p;k<a.length();k++)
					{
						if(a[p]==',')
						{
						count+=4;
						    
						}
				    }
					p=a.find("dup");
					char g[10];
					int f=0;
					if(p>=0)
					{
						p=p+3;
						g[f]=a[++p];
						cout<<g[f]<<endl;
						while(a[++p]!=')')
						{
						g[++f]=a[p];}}
						f=atoi(g);
						count*=f;
						lc=lc+count;
						st[x].type="var";
						st[x].segment=S;
						return segment(S,lc,++x,++y);
					  }
				else
				{
					cout<<"error";
					exit(0);
				}
		}
		 else if(p4>=0)
		 {
			 st[x].var=a.substr(0,p4);
			 st[x].lc=lc;
			 st[x].segment=S;
			 st[x].type="label";
			 return segment(S,lc,++x,++y);
		 }
		else
		{
			cout<<"error";
			exit(0);
			}
	 }
   else
   {
	 cout<<"error";
   }
 }

int main()
 {
   int i=0,y=0,x=0,p;
   cout<<"Enter the code:";
   do
	{
		gets(s1[i].line);
	}
   while(strcmp(s1[i++].line,"end start"));

  while(y<i)
   {      string a=s1[y].line;
			 if(a.find("segment")>=0 || a.find("SEGMENT"))
			 {
				p=a.find("segment");
				st[x].var=a.substr(0,p);
				st[x].segment="itself";
				st[x].type="segment";
				st[x].lc=0;
				y=segment(st[x].var,st[x].lc,++x,++y);
			 }
			

	}

  }


